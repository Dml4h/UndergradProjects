
                            Parallel Processing
                                 CSCI 6330
                                 Fall 2020


turnin_code:  pp_p6



Write a C program that uses  CUDA  on c00 to solve the problem described below.

This program will perform as a single layer of neurons in a neural network.
There will be:
    a 1-D vector of input values
    a 2-D array of weights
Your program should produce the 1-D vector of output values and print them
UNLESS the -t cmd-line flag is specified (below).
The activation function we will use is sigmoid.
Use doubles instead of floats.

The input will come from a file specified as the first command-line argument.
The second command-line arg is optional; if present, it will be  -t  and means
to just print the final total line (below) and NOT print all output values.

If there is a # on any input line, the # and everything after it is a comment.
The amount of white space between data items on a line is arbitrary (not fixed).
Here is sample input:

    4 3                   # number of inputs and neurons
    1.5  1.8  2.4  8.1    # all inputs on a single line
    0.5  0.1  0.2         # weights from first  input (to each neuron); single line
    0.4  0.1  0.2         # weights from second input (to each neuron); single line
    0.3  0.1  0.2         # weights from third  input (to each neuron); single line
    0.2  0.1  0.2         # weights from fourth input (to each neuron); single line

You can dynamically choose the number of GPU threads, blocks, etc that you wish
to use on each run.  You may wish to make sigmoid a __device__ function.

To run the program I will type commands like this:

    ./p6 some_input_filename    ## and -t may also be specified after the filename

I may also decide to run it with the nvprof program:

    nvprof ./p6 some_input_filename

Print the output of each neuron, one per line, preceded by an index.
At the end, print the sum (total) of all outputs.
For example, the above input might result in something like:

    0  0.978332
    1  0.798991
    2  0.940476
    total 2.717798


Reminders:
    warp size is 32  (num threads scheduled together)
    1024 is max threads per block; more than this may lead to a
         silent failure to launch

Maximums that you may assume:
    128 inputs
      2 million neurons in our single layer


Use turnin to submit a tar file containing all of your project files,
including a makefile that will build the executable program which MUST
be named p6.  Note that I only type the simple command "make" below in
order to have the program built.

    rm -rf p6
    rm -f  *.o
    make
